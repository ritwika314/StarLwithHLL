----- StarLib Changelog -----

10/29/2012, Adam
- Restored StarLib to Android SDK 10. NEVER CHANGE THIS EVER.

10/25/2012, Adam
- Optimized the UDPMessage class.
- Added custom # retries to message transmission.
- Added simulation time timeout to halt simulation after a certain length of simulated time has elapsed.

10/24/2012, Adam
- Added simulation timeout functionality. If the TIMEOUT value is positive the simulation will abort when the duration reaches TIMEOUT seconds.
- Lowered MAX_FPS default value to 30
- Added call to get simulation duration (length of simulated time)
- Protected all public variables in the SimulationEngine class
- Optimized a couple of pieces of DecoupledSimComChannel

9/29/2012, Adam
- Deleted StarLSim's package "simapps"
- Added sleep() method to LogicThread class which delivers pending messages before sleeping. LogicThread now implements MessageListener by default, and subclasses of LogicThread may receive messages by registering themselves as message listeners and overriding the receive() method.
- HOW DID NO ONE NOTICE THAT "messageReceied" WAS SPELLED WRONG???

9/23/2012, Adam
- Made SimSettings immutable to prevent any simulated code from ever changing simulation parameters. A new SimSettings must be built for each execution with different parameters.
- Added variables to SimSettings to control drawing waypoints

9/19/2012, Stan
- Created a SettingsWriter class to contain the Gson code so that I can run the simulator without having to download the library

9/19/2012, Stan
- Modified Deere Fardin App
- Synchronized Point Input in Simulator with drawing (and therefore with logic thread)

9/19/2012, Adam
- Simulator now saves settings for each simulation in trace directory in JSON
- Added timestamp variable to TraceWriter methods
- Removed StarLSim's "simapps" package from the build path
- Simulated apps now start their own trace files, no need to call trace.traceStart()
- Removed the broken distance predicate, added ability to include custom position observers for a simulation.

9/8/2012, Adam
- Cleaned up pieces of StarLib, including Android specific code
- Removed DeadReckoner because it's useless with the iRobot Create chassis
- Changed robot event listener interface to be more extensible for future event types
- Added message reception callback

9/5/2012, Stan
- Removed awt requirements from StarLib and LogicThread classes
- Separated out FardinDeere app and StanTestApp into own project following Adam's changes

9/4/2012, Adam
- Changed SimSettings to use the builder pattern. A separate "settings initializer" is no longer required.
- Changed MotionParameters defaults to values which provides smoother motion.
- MessageContents can now be retrieved and compared

9/1/2012, Adam
- Cleaned up GlobalLogger
- Changed simulator dataflow: Applications now call the simulator to simulate themselves instead of the other way around.
- Updated SimSettings to contain nonstatic public variables. Removed unnecessary path variables for paths to WPT files. This broke every application that referenced SimSettings. These broken applications have been excluded from the build path until they can be split into their own projects and updated.
- Added Javadoc comments to SimSettings.
- Removed StarLSim's Main.java file. This project is no longer runnable.

8/30/2012, Adam
- Cleaned up MotionAutomaton, removed commented out lines of code
- Added straight line and circle motion applications

8/29/2012, Stan
- Made the simapp drawing occur only when logic thread is asleep to prevent having to worry about concurrent modification exceptions
- added MAX_FPS variable to SimSettings, which you can adjust if drawing is blocking for too long
- updates to deere_fardin simapp

8/28/2012, Stan
- Adjusted Project Build Properties to remove unnecessary dependencies
- Removed 3 SimApps due to external dependence on ojalgo (if you want to readd them make a seperate project not integrated in the simulator please!). Removed LucasApp1.java, NewApp.java, and RoughTravelApp.java
- Fixed capitalization for Common.java, ItemPosition.java, PositionList.java
- Added support for explicit blocking of the wireless for various robots in the simulator
- Added variable velocity support in IdealSimGpsProvider
- Added support for the simulation programs to accept mouse input in the simulator when the user right clicks (AcceptsMouseInput.java)
- Added support for the simapps to be able to draw things (such as debug information) directly on the simulator (Drawer.java)
- Changed trace of robot positions to be a line instead of drawing the entire robot
- Fixed drawing letters on the simlator so they don't appear upside down
- Added detection and printing of runtime exceptions in simapp code rather than having them silently be ignored while waiting for all simapp threads to exit
- Added deere_fardin and stan packages in simapps as well as the corresponding apps


5/22/2012, Taylor
- Added relative path support for input and output files
- Fixed some bugs preventing collision avoidance from working in FlockingTestTwo

5/11/2012, Taylor
- Added GlobalLogger.java: quick hack to get a "global truth" timeline; seems basically correct as far as positions go, but local times of robots may be wrong (not sure if I'm using the right time variable)
- Added batch simulations runs on the number of robots, and directory handling to keep traces; see Main.java in StarlSim

4/29/12 Changelist:
STARLIB CHANGES:
- Added StarLCallable. All Callables must implement StarLCallable in order to simulate properly!
- Added gvh.pause and gvh.time methods. These must be used to pause methods and get the system time.
- Removed Thread as the baseclass of SingleHopMutualExclusion. There was no need for it to be a thread!
- Renamed "bluetooth" package to the more fitting "motion"
- Added new SmartCommsHandler which will one day replace CommsHandler. SCH will schedule (get it?) sleep delays appropriately, allowing for faster simulations.

SIMULATOR CHANGES:
- Decoupled simulator from real time!
- Added Decoupled message channel, removed all others
- Modified ideal and realistic motion sim to use the decoupled timing mechanic
- Added SimulationEngine class to maintiain decoupled simulation
- Added time and scale to GUI
- Added display of world grid
- Flipped simulated world vertically to match the real world

4/25/12 Changelist:

STARLIB CHANGES:
- Fixed a couple of bugs that could cause a CPU-consuming loop in Motion Automaton
- Added velocity public var to ItemPosition class. PositionList automatically calculates velocity when updating positions
- Fixed a case in which MotionAutomaton wouldn't correct for drift and would completely miss a target
- Fixed a case in MotionAutomaton where repeatedly sending a goTo command with the same destination would prevent motion
- Fixed a bug which would crash a simulated MotionAutomaton if motion_stop() was called

SIMULATOR CHANGES:
- Fixed "jumping" simulated robot motion problem


4/20/12 Changelist: 

SIMULATOR CHANGES:
- Changed robot radius to actual iRobot Create size
- Fixed several bugs in the drawing code related to radius and direction drawing
- Added a setting to switch between ideal and realistic simulated motion
- Changed SimApp class to instantiate a LogicThread object. This allows ANY StarL's LogicThread to be run in simulation!

STARLIB CHANGES:
- Removed BluetoothRobotMotion class
- Added additional parameters to MotionParameters class
- Updated CommsHandler to no longer receive or ACK broadcasts from ourself
- Added non-ideal simulated motion! This uses the RealisticSimMotionAutomaton, an extension of MotionAutomaton
- Added harnesses and updated interfaces for the realistic simulated motion
- Fixed a bug in MotionAutomaton that prevented stopped motion controllers from resuming correctly. This also reduces CPU usage!
- Added different collision avoidance modes to the MotionParameters class. Robots can now use collision avoidance, stop on collsion,
or run in "bumpercars" mode, where collisions don't matter.
- Added setParameters method to all RobotMotion classes. This sets the default motion parameters so a MotionParameters object doesn't need to be passed with every motion.

4/16/12 Changelist:

STARLIB CHANGES:
- Changed ItemPosition values to be public variables and marked getter methods as deprecated. All references to these deprecated methods should be removed!
- Added trace output to Geocaster
- Removed the unnecessary "getWaypoints()" method from Gps
- Removed interfaces associated with network discovery, which was removed for being glitchy and generally useless.
- Added javadoc comments to nearly everything of importance
- Added MotionParameters class, implemented by MotionAutomaton. This allows every robot motion to have different user-specified parameters
- Improved MotionAutomaton considerably. Movement speed now ramps linearly to minimize error.
- BluetoothRobotMotion has been deprecated and will be removed in the next release

4/6/12 Changelist:

SIMULATOR CHANGES:
- Added trace output to simulated GPS receiver and simulated motion automaton.
- Added option to start TraceWriter with clock drift and skew to add "realism" to simulator.
- Added a simple distance predicate checker to the simulator. If enabled in the main class, this records the times at which any two robots were closer than a predefined radius. Output is in an XML with the same formatting as trace files.
- Fixed IdealSimMotionAutomaton to properly implement the public boolean variable inMotion
- Moved all simulation settings to the final SimSettings class. One day this will load settings from a file or GUI, and all will be good.
- Simulation's WptLoader class can now handle WPT files with spaces in them.

STARLIB CHANGES:
- Added Geocaster to functions package with support for both rectangular and circular target regions
- Changed RandomLeaderElection to run asynchronously when electing a leader. The interface remains the same.
- Fixed BullyLeaderElection to operate asynchronously without using Android specific code. BLE now works properly.
- Created a public RobotMotion named "moat" in the gvh.plat object. RealGVH and SimGVH both instantiate the correct motion object. RealGVH's constructor now needs a MAC address to connect to.
- Fixed ACK messages not being correctly recorded in trace files by CommsHandler. This was caused by the "name" variable not being set in the Comms class and also prevented some message handling from occurring properly.
- Increased the maximum number of message sequence numbers from 10000 to Integer.MAX_VALUE (apx 2.1 billion)
- Fixed a bug in the UdpComThread that prevented physical messages from being exchanged (!)
- Fixed a bug in BluetoothInterface where reading information would incorrectly return the wrong bytes

OTHER CHANGES:
- Added abstract class LogicThread to StarLib's "interfaces" package.
- Added a new project, "StarlTemplate", with a redesigned Activity class and new "AppLogic" class extending LogicThread implementing Callable. This template project will become the base for all future StarL applications once it has been properly tested. LogicThreads which implement Callable are closer to the SimApp class, making the transition from simulation to implementation easier.